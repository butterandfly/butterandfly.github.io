{"title":" Polymer1.0制作博客（2）：article-list","createDate":"2015-07-20","url":"data/2015-07-20-how-to-build-blog-2.json","fileName":"2015-07-20-how-to-build-blog-2","content":"# Polymer1.0制作博客（2）：article-list\n\n>这一章我们会制作该项目里的第一个自定义元素`<article-list>`，该元素呈现一个文章列表。不过，我们先讨论一下项目的目录结构。\n\n## 目录结构\n\n```\n./app\n├── elements\n│   ├── elements.html\n│   ├── my-greeting\n│   ├── my-list\n│   └── routing.html\n├── favicon.ico\n├── images\n│   └── touch\n├── index.html\n├── manifest.json\n├── precache.json\n├── robots.txt\n├── scripts\n│   └── app.js\n├── styles\n│   ├── app-theme.html\n│   └── main.css\n├── sw-import.js\n└── test\n    ├── index.html\n    ├── my-greeting-basic.html\n    └── my-list-basic.html\n```\n\n页面需要用到的内容，都放在app目录下：包括html、css、js、自定义元素等等，但不包含bower_components。\n* `index.html`是项目的入口页\n* `elements`目录存放所有的自定义元素\n* `styles`、`scripts`存放额外的样式、代码相关的内容\n* `test`存放测试代码\n\n## 制作`<article-list>`\n\n### 使用`yo polymer:el`创建\n\n`yo polymer:el`是generator-polymer提供的一个创建自定义元素的命令。\n\n```\nyo polymer:el article-list\n\n# 他会询问你是否自动添加到elements.html内，选yes\n? Would you like to include an import in your elements.html file? (y/N)\n\n# 成功的输出\ncreate app/elements/article-list/article-list.html\n```\n\n如输出所说，新的元素放置在`app/elements`下。对于不使用yeoman的同学，可以直接在相应目录下新建一个html文件。\n\n### 修改html\n\n打开\"article-list.html\"：\n\n```\n<link rel=\"import\" href=\"../../bower_components/polymer/polymer.html\">\n\n<dom-module id=\"article-list\">\n  <style>\n    :host {\n      display: block;\n    }\n  </style>\n  <template>\n    <div>Hello from <span>{{foo}}</span></div>\n  </template>\n</dom-module>\n<script>\n(function() {\n  Polymer({\n    is: 'article-list',\n\n    properties: {\n      foo: {\n        type: String,\n        value: 'bar',\n        notify: true\n      }\n    }\n  });\n})();\n</script>\n```\n\n上面这段代码创建一个自定义元素`<article-list>`。关于创建自定义元素更详尽的说明，可查看官网的[\"Quick tour of Polymer\"](https://www.polymer-project.org/1.0/docs/start/quick-tour.html)，这里就不多赘述了。\n\n现在我们添加自己的类容。首先找到下面这段html内容：\n\n```\n    <div>Hello from <span>{{foo}}</span></div>\n```\n\n换成：\n\n```\n    <div>\n      <template is=\"dom-repeat\" items=\"{{articles}}\">\n        <paper-item>\n          <a href=\"#\">\n            <span class=\"title\">{{item.title}}</span>\n            <span class=\"create-date\">{{item.createDate}}</span>\n          </a>\n        </paper-item>\n      </template>\n    </div>\n```\n\n`dom-repeat`是一个数据绑定的帮助类元素：它能遍历items属性（通常是数组），对每一项生成一次template内的html内容。对`dom-repeat`更详尽的描述，可参照官网的[\"Data binding helper elements\"](https://www.polymer-project.org/1.0/docs/devguide/templates.html#handling-events)。\n\n[`paper-item`](https://elements.polymer-project.org/elements/paper-item)是一个MD风格的item元素，它默认是“horizontal flexbox”布局；在这里我们只需要简单地把内容填充到元素内。注意这里数据绑定的`item`对象是`dom-repeat`中遍历的`items`的每一项。\n\n### 修改javascript\n修改`script`里的代码，换成：\n\n```html\n<script>\n  (function () {\n    Polymer({\n      is: 'article-list',\n\n      properties: {\n        articles: {\n          type: Array,\n          value: null,\n          notify: true\n        }\n      },\n\n      ready: function() {\n        this.articles = [\n          {\"title\":\"Article 1\",\"createDate\":\"2015-05-29\"},\n          {\"title\":\"文章 2\",\"createDate\":\"2015-05-20\"}\n        ];\n      }\n    });\n  })();\n</script>\n```\n\n公共API、数据绑定等的属性都可定义在`properties`里。这里我们定义`articles`属性来存放我们所有的文章；他是一个数组、默认为`null`；`notify`设置为true使得其成为一个双向绑定。\n\n关于`properties`的更多内容，可参考文章[Declared properties](https://www.polymer-project.org/1.0/docs/devguide/properties.html)。\n\n`ready`方法会在元素创建成功后执行。在这里我们仅简单地向`articles`添加一些内容（以后会改成用json数据）。注意，这里`this.articles`可以直接获得`this.properties.articles`的内容。\n\n### 修改index.html\n首先，打开`app/elements/elements.html`文件，确保已包含下面这段代码：\n\n```html\n<link rel=\"import\" href=\"article-list/article-list.html\">\n```\n\n`elements.html`文件可统一导入应用需要用到的自定义元素和自定义样式。在此导入`article-list`后，index.html就可以直接使用该自定义元素了。\n\n现在打开`app/index.html`文件，找到上一章里编写的helloworld：\n\n```\n<h1>Hello World!</h1>\n```\n\n换成\n\n```html\n<article-list></article-list>\n```\n\n修改都完成后，使用`gulp serve`命令打开项目页面，如无意外，你会看到一个包行两行的列表。虽然很简陋，但刚刚我们完成了此项目的第一个自定义元素:)\n"}