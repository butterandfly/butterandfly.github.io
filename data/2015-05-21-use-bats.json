{"title":" 使用bats对bash代码进行测试","createDate":"2015-05-21","url":"data/2015-05-21-use-bats.json","fileName":"2015-05-21-use-bats","content":"# 使用bats对bash代码进行测试\n\n## 什么是bats\n\n在之前的一篇文章里，我们编写了一段创建博客post的代码。而在编写的过程中难免会不断地手工进行测试：运行代码，删除创建的文件，运行代码...... 那能不能编写代码对create-post这个程序自动进行测试呢？当然是有的。google了一下后，我找到了bats这个项目：https://github.com/sstephenson/bats\n\n按照其说法就是：Bash Automated Testing System，缩写为bats。\n\n## 安装\n按照readme的方法，安装bats有两种方式：\n\n* 把项目里bin目录下的bats二进制文件放置path下；\n* 运行其提供install.sh\n\n而我是简单地把项目clone了下来，添加一个link到bin/bats上。\n\n## 开始我们第一个测试\n我们可以直接复制readme上的一段事例代码来运行一下：\n\n```\n#!/usr/bin/env bats\n\n@test \"addition using bc\" {\n  result=\"$(echo 2+2 | bc)\"\n    [ \"$result\" -eq 4 ]\n    }\n\n@test \"addition using dc\" {\n  result=\"$(echo 2 2+p | dc)\"\n    [ \"$result\" -eq 4 ]\n    }\n```\n\n将上面代码另存为为tests.sh，然后在命令行运行：\n\n```\n$ bats tests.sh\n```\n\n如无意外你可以看到成功的输出提示。\n\n## 编写create-post的测试\n\ncreate-post的测试非常简单，就是测试在运行命令后是否有期望的文件被创建。\n\n```\n#!/usr/bin/env bats\n\ntitleName=\"a-title.test\";\n\n@test \"create-post创建文件\" {\n    # 运行命令\n        run ./bin/create-post \"${titleName}\";\n\t    # 期待的文件名\n\t        expectFileName=\"$(date +%F)-${titleName}.md\";\n\n    # 测试文件是否存在\n        [[ -e $expectFileName ]];\n\t}\n```\n\n`@test`和`run`都是bats提供的语法，前者定义一个测试，后者运行一段命令。\n\n### setup与teardown\n然而，运行上面这个测试后，会产生一个md文件；我们希望测试完后这个文件能自动被清除。这里就可以用bats提供的teardown来在每个测试后自动运行一段代码：\n\n```\n#!/usr/bin/env bats\n\ntitleName=\"a-title.test\";\n\nteardown() {\n    # 删除生成的文件\n        rm *.test.md;\n\t}\n\n\n@test \"create-post创建文件\" {\n    # 运行命令\n        run ./bin/create-post \"${titleName}\";\n\t    # 期待的文件名\n\t        expectFileName=\"$(date +%F)-${titleName}.md\";\n\n    # 测试文件是否存在\n        [[ -e $expectFileName ]];\n\t}\n```\n\n在每个test运行后，都会执行teardown方法内的代码。同理，setup则是在每个test前执行的方法。\n"}