{"title":" Polymer1.0制作博客（4）：路由","createDate":"2015-08-19","url":"data/2015-08-19-how-to-build-blog-4.json","fileName":"2015-08-19-how-to-build-blog-4","content":"# Polymer1.0制作博客（4）：路由\n\n> 这一章我们会开始使用路由。多种路由模块都可以与polymer搭配使用，如`page`、`app-router`和`more-routing`。不过后两者貌似还未能在polymer1.0中正常使用，所以我们选择generator默认的`page`。\n\n## 添加article页面\n该项目默认使用[page](https://github.com/visionmedia/page.js)作为单页面应用的路由；另外，我们需要`iron-pages`作为多页面支持。\n\n打开`app/elements/elements/elements.html`，确保已包含了下面的代码（项目生成后就会存在）：\n\n```html\n<link rel=\"import\" href=\"../bower_components/iron-pages/iron-pages.html\">\n```\n\n打开`app/index.html`，把`<template is=\"dom-bind\" id=\"app\">`内的内容改成：\n\n```html\n  <template is=\"dom-bind\" id=\"app\">\n    <iron-pages attr-for-selected=\"data-route\" selected=\"{{route}}\">\n\n      <section data-route=\"home\">\n        <article-list></article-list>\n      </section>\n\n      <section data-route=\"article\">\n        <h1>Article Page</h1>\n      </section>\n    </iron-pages>\n\n    <!-- 以下为原有内容不用删去 -->\n    <paper-toast id=\"caching-complete\"\n                 duration=\"6000\"\n                 text=\"Caching complete! This app will work offline.\">\n    ...省略\n\n```\n\n这里我们使用了`iron-pages`。它用来显示选择的一个子元素，并隐藏其它。这里的两个section，“home”和“article”，分别对应首页和文章页。根据`iron-pages`的`selected`属性，显示对应的页面。\n\n> #### \"dom-bind\"\n你或许会疑惑`<iron-pages>`中`selected`属性所绑定的`route`，是属于谁？这里我们并没有自定义元素。\n其实，我们可以用一个`is=\"dom-bind\"`的`<template>`来实现非自定义元素中的数据绑定。而在上面代码中，`route`属于id为\"app\"的元素。\n更详细的内容可阅读看[Auto-binding templates](https://www.polymer-project.org/1.0/docs/devguide/templates.html#dom-bind)。\n\n现在，打开`app/elements/routing.html`文件，将`WebComponentsReady`的监听代码改为如下：\n\n```javascript\n  window.addEventListener('WebComponentsReady', function() {\n    page('/', function () {\n      app.route = 'home';\n    });\n\n    page('/article', function (data) {\n      app.route = 'article';\n    });\n\n    // 在每个url前添加 #!\n    page({\n      hashbang: true\n    });\n  });\n```\n\n上面代码在Web Component构建成功后，向路由其添加了两个route，“home”和“article”，分别对应html中的两个session。而因为这是单页面应用，我们需要在每个页面的url前添加`#!`。\n\n对于路由器\"page\"，更详细的使用说明可查看[page](https://github.com/visionmedia/page.js)。\n\n> #### 关于WebComponentsReady事件\n\n> 当所有Web Component都构建后，window会fire一个WebComponentsReady事件。上述代码写在WebComponentsReady事件触发后，确保`app`已经构建成功（不然不能寻得）。\n\n> 根据[\"Use WebComponentsReady instead of polymer-ready\"](https://www.polymer-project.org/1.0/docs/migration.html#polymer-ready)文章所述，Polymer 1.0后可以直接使用该事件，而不再是0.5中建议的\"polymer-ready\"。而且该事件也只在使用\"web components polyfills\"的页面中存在：对于原生支持web component的情况（例如chrome扩展），因为自定义元素是同步构建的，所以不再需要该事件。\n\n### 测试页面\n保存刚才的改动，运行`gulp serve`在浏览器中打开页面。你依然能看到上一章中制作的文章列表；现在把页面的地址改为`#!/article`（如\"http://localhost:3000/#!/article\"），然后重新载入，正常的话，你会看到“Article Page”标题。\n"}